// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Token {
    string public name = "ExampleToken";
    string public symbol = "ETK";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;

    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    constructor(uint256 initialSupply) {
        owner = msg.sender;
        mint(owner, initialSupply);
    }

    function mint(address to, uint256 value) public onlyOwner {
        require(to != address(0), "Cannot mint to the zero address");
        require(value > 0, "Mint value must be greater than zero");

        totalSupply += value;
        balanceOf[to] += value;
        emit Mint(to, value);
    }

    function transfer(address to, uint256 value) public {
        require(to != address(0), "Cannot transfer to the zero address");
        require(value > 0, "Transfer value must be greater than zero");
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
    }

    function burn(uint256 value) public {
        require(value > 0, "Burn value must be greater than zero");
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        totalSupply -= value;
        emit Burn(msg.sender, value);
    }

    function assertExample(uint256 x, uint256 y) public pure returns (uint256) {
        assert(x != y);
        return x + y;  // This line will never execute if assert condition fails
    }

    function revertExample(uint256 value) public pure returns (uint256) {
        if (value == 0) {
            revert("Value cannot be zero");
        }
        return value * 2;
    }

    function requireExample(uint256 number) public pure returns (uint256) {
        require(number > 10, "Number must be greater than 10");
        return number * 2;
    }
}
